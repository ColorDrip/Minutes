import pandas as pd
import numpy as np
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error, r2_score
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from pmdarima import auto_arima
from prophet import Prophet
from sklearn.linear_model import LinearRegression
import warnings

warnings.filterwarnings("ignore", message=".*Plotly.*")
warnings.filterwarnings("ignore", category=FutureWarning)

# =======================================
# 1. Configurations
# =======================================
file_path = "your_file.xlsx"    # Input file path
future_months = 60              # Forecast horizon (5 years)

# =======================================
# 2. Helper Functions
# =======================================

def calc_metrics(actual, predicted):
    """Calculate error metrics for evaluation"""
    mae = mean_absolute_error(actual, predicted)
    mape = mean_absolute_percentage_error(actual, predicted) * 100
    rmse = np.sqrt(mean_squared_error(actual, predicted))
    r2 = r2_score(actual, predicted)
    accuracy = 100 - mape
    return {'MAE': mae, 'MAPE': mape, 'RMSE': rmse, 'R2': r2, 'Accuracy%': accuracy}

# =======================================
# 3. Load & Preprocess Data
# =======================================

df = pd.read_excel(file_path)
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)
df = df.set_index('Date').resample('M').mean()
df = df.asfreq('M')
df = df.dropna(how='all', axis=1)

# =======================================
# 4. Storage
# =======================================
metrics_results = []
historical_predictions = []
future_forecasts = []

# =======================================
# 5. Process Each Column
# =======================================
for column in df.columns:
    series = df[column]

    # Split into historical and manual future
    today = pd.Timestamp.today().to_period('M').to_timestamp()
    historical_series = series.loc[series.index <= today].dropna()
    manual_future_series = series.loc[series.index > today].dropna()

    # Combine historical + manual future (treated as actual data)
    combined_series = pd.concat([historical_series, manual_future_series])

    if combined_series.empty or len(combined_series) < 2:
        print(f"Skipping {column} â€“ not enough data")
        continue

    # Forecast horizon after last known (manual or historical) value
    last_known_date = combined_series.index[-1]
    future_index = pd.date_range(last_known_date + pd.DateOffset(months=1),
                                 periods=future_months,
                                 freq='M')

    print(f"\n--- Processing {column} ---")

    # ---------------------------
    # 1. Simple Average
    # ---------------------------
    simple_avg_pred = pd.Series(historical_series.mean(), index=historical_series.index)
    simple_avg_future = pd.Series(combined_series.mean(), index=future_index)
    simple_avg_metrics = calc_metrics(historical_series, simple_avg_pred)

    # ---------------------------
    # 2. Running Average
    # ---------------------------
    run_avg_pred = historical_series.expanding().mean()
    run_avg_future = pd.Series(run_avg_pred.iloc[-1], index=future_index)
    run_avg_metrics = calc_metrics(historical_series, run_avg_pred)

    # ---------------------------
    # 3. ETS (Holt-Winters)
    # ---------------------------
    try:
        ets_model = ExponentialSmoothing(combined_series,
                                         trend='add',
                                         seasonal='add',
                                         seasonal_periods=12).fit()
        ets_pred_hist = ets_model.fittedvalues.loc[historical_series.index]
        ets_future = pd.Series(ets_model.forecast(future_months), index=future_index)
        ets_metrics = calc_metrics(historical_series, ets_pred_hist)
    except:
        ets_pred_hist = pd.Series([np.nan]*len(historical_series), index=historical_series.index)
        ets_future = pd.Series([np.nan]*future_months, index=future_index)
        ets_metrics = {'MAE': np.nan, 'MAPE': np.nan, 'RMSE': np.nan, 'R2': np.nan, 'Accuracy%': np.nan}

    # ---------------------------
    # 4. ARIMA
    # ---------------------------
    try:
        arima_model = auto_arima(combined_series, seasonal=False, stepwise=True, suppress_warnings=True)
        arima_pred_hist = pd.Series(arima_model.predict_in_sample()[:len(historical_series)],
                                    index=historical_series.index)
        arima_future = pd.Series(arima_model.predict(n_periods=future_months), index=future_index)
        arima_metrics = calc_metrics(historical_series, arima_pred_hist)
    except:
        arima_pred_hist = pd.Series([np.nan]*len(historical_series), index=historical_series.index)
        arima_future = pd.Series([np.nan]*future_months, index=future_index)
        arima_metrics = {'MAE': np.nan, 'MAPE': np.nan, 'RMSE': np.nan, 'R2': np.nan, 'Accuracy%': np.nan}

    # ---------------------------
    # 5. SARIMA (Seasonal ARIMA)
    # ---------------------------
    try:
        sarima_model = auto_arima(combined_series,
                                  seasonal=True,
                                  m=12,
                                  stepwise=True,
                                  suppress_warnings=True)
        sarima_pred_hist = pd.Series(sarima_model.predict_in_sample()[:len(historical_series)],
                                     index=historical_series.index)
        sarima_future = pd.Series(sarima_model.predict(n_periods=future_months), index=future_index)
        sarima_metrics = calc_metrics(historical_series, sarima_pred_hist)
    except:
        sarima_pred_hist = pd.Series([np.nan]*len(historical_series), index=historical_series.index)
        sarima_future = pd.Series([np.nan]*future_months, index=future_index)
        sarima_metrics = {'MAE': np.nan, 'MAPE': np.nan, 'RMSE': np.nan, 'R2': np.nan, 'Accuracy%': np.nan}

    # ---------------------------
    # 6. Prophet
    # ---------------------------
    try:
        prophet_df = combined_series.reset_index()
        prophet_df.columns = ['ds', 'y']
        prophet_model = Prophet(daily_seasonality=False, yearly_seasonality=True)
        prophet_model.fit(prophet_df)

        # Historical predictions
        forecast_hist = prophet_model.predict(prophet_df)
        prophet_pred_hist = pd.Series(forecast_hist['yhat'].values[:len(historical_series)],
                                      index=historical_series.index)

        # Future predictions
        future_df = pd.DataFrame({'ds': future_index})
        prophet_future = pd.Series(prophet_model.predict(future_df)['yhat'].values, index=future_index)
        prophet_metrics = calc_metrics(historical_series, prophet_pred_hist)
    except:
        prophet_pred_hist = pd.Series([np.nan]*len(historical_series), index=historical_series.index)
        prophet_future = pd.Series([np.nan]*future_months, index=future_index)
        prophet_metrics = {'MAE': np.nan, 'MAPE': np.nan, 'RMSE': np.nan, 'R2': np.nan, 'Accuracy%': np.nan}

    # ---------------------------
    # 7. Linear Regression
    # ---------------------------
    try:
        X = np.arange(len(combined_series)).reshape(-1, 1)
        lr_model = LinearRegression().fit(X, combined_series.values)

        # Historical predictions
        lr_pred_hist = pd.Series(lr_model.predict(X)[:len(historical_series)],
                                 index=historical_series.index)

        # Future predictions
        X_future = np.arange(len(combined_series), len(combined_series)+future_months).reshape(-1, 1)
        lr_future = pd.Series(lr_model.predict(X_future), index=future_index)
        lr_metrics = calc_metrics(historical_series, lr_pred_hist)
    except:
        lr_pred_hist = pd.Series([np.nan]*len(historical_series), index=historical_series.index)
        lr_future = pd.Series([np.nan]*future_months, index=future_index)
        lr_metrics = {'MAE': np.nan, 'MAPE': np.nan, 'RMSE': np.nan, 'R2': np.nan, 'Accuracy%': np.nan}

    # ============================
    # Save Metrics
    # ============================
    models = ['Simple Average', 'Running Average', 'ETS', 'ARIMA', 'SARIMA', 'Prophet', 'Linear Regression']
    metrics_list = [simple_avg_metrics, run_avg_metrics, ets_metrics, arima_metrics,
                    sarima_metrics, prophet_metrics, lr_metrics]

    for model_name, metrics in zip(models, metrics_list):
        metrics_results.append({
            'Column': column,
            'Model': model_name,
            **metrics
        })

    # ============================
    # Save Historical Predictions
    # ============================
    hist_df = pd.DataFrame({
        'Date': historical_series.index,
        'Actual': historical_series.values,
        'Simple Average': simple_avg_pred.values,
        'Running Average': run_avg_pred.values,
        'ETS': ets_pred_hist.values,
        'ARIMA': arima_pred_hist.values,
        'SARIMA': sarima_pred_hist.values,
        'Prophet': prophet_pred_hist.values,
        'Linear Regression': lr_pred_hist.values,
        'Column': column
    })
    historical_predictions.append(hist_df)

    # ============================
    # Save Future Forecasts
    # ============================
    future_df = pd.DataFrame({
        'Date': future_index,
        'Simple Average': simple_avg_future.values,
        'Running Average': run_avg_future.values,
        'ETS': ets_future.values,
        'ARIMA': arima_future.values,
        'SARIMA': sarima_future.values,
        'Prophet': prophet_future.values,
        'Linear Regression': lr_future.values,
        'Column': column
    })
    future_forecasts.append(future_df)

# =======================================
# 6. Combine Outputs for Qlik Sense
# =======================================
metrics_df = pd.DataFrame(metrics_results)
metrics_df['Type'] = 'Metric'

hist_df_final = pd.concat(historical_predictions)
hist_melt = hist_df_final.melt(id_vars=['Date', 'Actual', 'Column'],
                               var_name='Model',
                               value_name='Predicted')
hist_melt = hist_melt[hist_melt['Model'] != 'Actual']
hist_melt['Type'] = 'Historical'

future_df_final = pd.concat(future_forecasts)
future_melt = future_df_final.melt(id_vars=['Date', 'Column'],
                                   var_name='Model',
                                   value_name='Predicted')
future_melt['Type'] = 'Forecast'
future_melt['Actual'] = np.nan

combined_df = pd.concat([metrics_df, hist_melt, future_melt], ignore_index=True)

# Save single CSV for Qlik Sense
combined_df.to_csv("forecast_all_in_one.csv", index=False)

print("Unified forecast data saved to forecast_all_in_one.csv for Qlik Sense")