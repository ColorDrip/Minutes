import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error
import matplotlib.pyplot as plt

# 1. Load and clean data
df = pd.read_csv("your_file.csv")  # Replace with your file
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.drop(columns=['Date'])

df = df.apply(pd.to_numeric, errors='coerce')
df = df.replace([np.inf, -np.inf], np.nan).dropna()

# 2. Define features (X) and target (y)
target_col = 'Depreciation'
X = df.drop(columns=[target_col])
y = df[target_col]

# 3. Train-test split (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# 4. Random Forest model
rf_model = RandomForestRegressor(n_estimators=200, random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)

# 5. XGBoost model
xgb_model = XGBRegressor(n_estimators=200, learning_rate=0.1, random_state=42)
xgb_model.fit(X_train, y_train)
xgb_pred = xgb_model.predict(X_test)

# 6. Evaluate accuracy
def evaluate_model(y_true, y_pred, name):
    mape = mean_absolute_percentage_error(y_true, y_pred) * 100
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    print(f"{name} - MAPE: {mape:.2f}%, RMSE: {rmse:.2f}")
    return mape, rmse

rf_mape, rf_rmse = evaluate_model(y_test, rf_pred, "Random Forest")
xgb_mape, xgb_rmse = evaluate_model(y_test, xgb_pred, "XGBoost")

# 7. Compare visually
plt.figure(figsize=(10, 5))
plt.plot(y_test.values, label="Actual", marker='o')
plt.plot(rf_pred, label="Random Forest Predicted", marker='x')
plt.plot(xgb_pred, label="XGBoost Predicted", marker='s')
plt.title("Depreciation Prediction Comparison")
plt.xlabel("Test Data Index")
plt.ylabel("Depreciation Value")
plt.legend()
plt.grid(True)
plt.show()

# 8. Export results to Excel
results = pd.DataFrame({
    "Actual": y_test.values,
    "RandomForest_Predicted": rf_pred,
    "XGBoost_Predicted": xgb_pred
})
results.to_excel("model_predictions.xlsx", index=False)
print("Predictions saved to model_predictions.xlsx")