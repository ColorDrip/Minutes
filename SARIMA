import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error, r2_score
from pmdarima import auto_arima
from pandas.tseries.offsets import MonthEnd
from statsmodels.tsa.stattools import acf

# ======= Load Data =======
df = pd.read_excel("your_file.xlsx")
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)  # DD-MM-YYYY
df = df.set_index('Date').resample('ME').mean()
df = df.dropna(how='all', axis=1)

# ======= Metric Function =======
def calc_metrics(actual, predicted):
    mae = mean_absolute_error(actual, predicted)
    mape = mean_absolute_percentage_error(actual, predicted) * 100
    rmse = np.sqrt(mean_squared_error(actual, predicted))
    r2 = r2_score(actual, predicted)
    accuracy = 100 - mape
    return {'MAE': mae, 'MAPE': mape, 'RMSE': rmse, 'R2': r2, 'Accuracy%': accuracy}

# ======= Auto Seasonality Detection =======
def detect_seasonality(series, max_lag=24):
    """
    Finds repeating seasonal cycle using autocorrelation
    """
    acf_values = acf(series, nlags=max_lag)
    # Find lag with highest correlation (ignoring lag 0)
    lag = np.argmax(acf_values[1:]) + 1
    # If correlation > 0.3 treat as seasonal
    return lag if acf_values[lag] > 0.3 else 1

# ======= Storage =======
metrics_results = []
historical_predictions = []
future_forecasts = []
future_months = 6

for column in df.columns:
    series = df[column].dropna()

    # --- Skip bad data ---
    if series.empty or len(series) < 2 or series.nunique() < 2:
        print(f"Skipping {column} â€“ not enough variation/data")
        continue

    dates = series.index
    y = series.values

    print(f"\n--- Forecasting for {column} ---")

    # Auto-detect seasonality
    m = detect_seasonality(series)
    print(f"Detected seasonality (m): {m}")

    future_index = pd.date_range(dates[-1] + MonthEnd(1), periods=future_months, freq='ME')

    # ===================== ARIMA (non-seasonal) =====================
    try:
        arima_model = auto_arima(series, seasonal=False, stepwise=True, suppress_warnings=True)
        arima_pred_hist = pd.Series(arima_model.predict_in_sample(), index=dates)
        arima_future = pd.Series(arima_model.predict(n_periods=future_months), index=future_index)
        arima_metrics = calc_metrics(series, arima_pred_hist)
    except:
        arima_pred_hist = pd.Series([np.nan]*len(series), index=dates)
        arima_future = pd.Series([np.nan]*future_months, index=future_index)
        arima_metrics = {'MAE': np.nan, 'MAPE': np.nan, 'RMSE': np.nan, 'R2': np.nan, 'Accuracy%': np.nan}

    # ===================== SARIMA (seasonal) =====================
    try:
        sarima_model = auto_arima(series, seasonal=True, m=m, stepwise=True, suppress_warnings=True)
        sarima_pred_hist = pd.Series(sarima_model.predict_in_sample(), index=dates)
        sarima_future = pd.Series(sarima_model.predict(n_periods=future_months), index=future_index)
        sarima_metrics = calc_metrics(series, sarima_pred_hist)
    except:
        sarima_pred_hist = pd.Series([np.nan]*len(series), index=dates)
        sarima_future = pd.Series([np.nan]*future_months, index=future_index)
        sarima_metrics = {'MAE': np.nan, 'MAPE': np.nan, 'RMSE': np.nan, 'R2': np.nan, 'Accuracy%': np.nan}

    # Save metrics for both
    metrics_results.append({'Column': column, 'Model': 'ARIMA', **arima_metrics})
    metrics_results.append({'Column': column, 'Model': 'SARIMA', **sarima_metrics})

    # Save historical predictions (combined)
    hist_df = pd.DataFrame({
        'Date': dates,
        'Actual': series.values,
        'ARIMA_Predicted': arima_pred_hist.values,
        'SARIMA_Predicted': sarima_pred_hist.values,
        'Column': column
    })
    historical_predictions.append(hist_df)

    # Save future forecasts (combined)
    future_df = pd.DataFrame({
        'Date': future_index,
        'ARIMA_Forecast': arima_future.values,
        'SARIMA_Forecast': sarima_future.values,
        'Column': column
    })
    future_forecasts.append(future_df)

    # Plot comparison
    plt.figure(figsize=(10,5))
    plt.plot(dates, series, label='Actual', color='black', linewidth=2)
    plt.plot(dates, arima_pred_hist, label='ARIMA', color='blue', linestyle='--')
    plt.plot(dates, sarima_pred_hist, label='SARIMA', color='green', linestyle='-')
    plt.title(f"{column} - Actual vs ARIMA vs SARIMA (Historical)")
    plt.legend()
    plt.grid(True)
    plt.show()

# ======= Save to Excel =======
metrics_df = pd.DataFrame(metrics_results)
hist_df_final = pd.concat(historical_predictions)
future_df_final = pd.concat(future_forecasts)

with pd.ExcelWriter("arima_sarima_comparison.xlsx") as writer:
    metrics_df.to_excel(writer, sheet_name='Model Metrics', index=False)
    hist_df_final.to_excel(writer, sheet_name='Historical Predictions', index=False)
    future_df_final.to_excel(writer, sheet_name='Future Forecasts', index=False)

print("Results saved to arima_sarima_comparison.xlsx")