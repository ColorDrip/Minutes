# =======================================
# 1. Import Libraries
# =======================================
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from pmdarima import auto_arima

# =======================================
# 2. Load Your Data
# =======================================
file_path = "your_file.csv"  # <-- replace with your file
date_col = "Date"            # <-- replace with your date column name
cost_col = "Cost"            # <-- replace with your cost column name

# Load file
data = pd.read_csv(file_path)

# Parse dates (set dayfirst=True if your dates are DMY)
data[date_col] = pd.to_datetime(data[date_col], dayfirst=True)

# Set Date as index
data.set_index(date_col, inplace=True)

# Ensure monthly frequency
data = data.asfreq('M')

# =======================================
# 3. Handle Missing Months & Values
# =======================================
# Create full monthly index from first to last date
full_index = pd.date_range(start=data.index.min(), end=data.index.max(), freq='M')

# Reindex and forward fill missing values
data = data.reindex(full_index)
data[cost_col] = data[cost_col].ffill()

# =======================================
# 4. Decompose to See Trend & Seasonality
# =======================================
decomposition = seasonal_decompose(data[cost_col], model='additive', period=12)
decomposition.plot()
plt.show()

# =======================================
# 5. Auto ARIMA Model (Automatically Selects Best Parameters)
# =======================================
auto_model = auto_arima(
    data[cost_col],
    seasonal=True,
    m=12,              # monthly seasonality
    trace=False,
    error_action='ignore',
    suppress_warnings=True,
    stepwise=True
)

print("Best ARIMA Order:", auto_model.order)
print("Best Seasonal Order:", auto_model.seasonal_order)

# =======================================
# 6. Forecast Next 5 Years (60 Months)
# =======================================
forecast_steps = 60  # 5 years monthly

# Get forecast values
forecast = auto_model.predict(n_periods=forecast_steps)

# Create future date index
future_dates = pd.date_range(start=data.index[-1] + pd.offsets.MonthBegin(1), periods=forecast_steps, freq='M')

# Create forecast series
forecast_series = pd.Series(forecast, index=future_dates)

# =======================================
# 7. Plot Historical + Forecast
# =======================================
plt.figure(figsize=(12, 6))
plt.plot(data[cost_col], label='Historical Data')
plt.plot(forecast_series, label='Forecast (Next 5 Years)', color='red')
plt.title("Monthly Cost Forecast (Auto ARIMA)")
plt.legend()
plt.show()