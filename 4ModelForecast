import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error

# 1. Load and clean data
df = pd.read_csv("your_file.csv")

# Drop Date if present
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.drop(columns=['Date'])

# Convert all to numeric
df = df.apply(pd.to_numeric, errors='coerce')
df = df.replace([np.inf, -np.inf], np.nan).dropna()

# Define target and features
target_col = 'Depreciation'
y = df[target_col].values
X = df.drop(columns=[target_col]).values

# Train-test split (80/20)
split_idx = int(len(df) * 0.8)
X_train, X_test = X[:split_idx], X[split_idx:]
y_train, y_test = y[:split_idx], y[split_idx:]

# ---- Model 1: Linear Regression ----
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# ---- Model 2: Random Forest ----
rf = RandomForestRegressor(n_estimators=200, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# ---- Model 3: Simple Average ----
simple_avg_pred = np.full_like(y_test, np.mean(y_train), dtype=float)

# ---- Model 4: Moving Average (last 3 months) ----
window = 3
moving_avg_pred = []
for i in range(len(y_test)):
    if split_idx + i - window >= 0:
        avg = np.mean(y[max(0, split_idx + i - window):split_idx + i])
    else:
        avg = np.mean(y[:split_idx])
    moving_avg_pred.append(avg)
moving_avg_pred = np.array(moving_avg_pred)

# ---- Evaluation Function ----
def evaluate(name, y_true, y_pred):
    mape = mean_absolute_percentage_error(y_true, y_pred) * 100
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    print(f"{name} -> MAPE: {mape:.2f}%, RMSE: {rmse:.2f}")
    return [name, mape, rmse]

results = []
results.append(evaluate("Linear Regression", y_test, lr_pred))
results.append(evaluate("Random Forest", y_test, rf_pred))
results.append(evaluate("Simple Average", y_test, simple_avg_pred))
results.append(evaluate("Moving Average", y_test, moving_avg_pred))

# Convert results to DataFrame
results_df = pd.DataFrame(results, columns=["Model", "MAPE", "RMSE"])

# Find best model
best_model = results_df.loc[results_df['MAPE'].idxmin()]
print("\nComparison Table:\n", results_df)
print(f"\nBest Model: {best_model['Model']} (MAPE={best_model['MAPE']:.2f}%, RMSE={best_model['RMSE']:.2f})")

# Plot predictions
plt.figure(figsize=(10,6))
plt.plot(y_test, label="Actual", marker='o')
plt.plot(lr_pred, label="Linear Regression", marker='x')
plt.plot(rf_pred, label="Random Forest", marker='s')
plt.plot(simple_avg_pred, label="Simple Average", linestyle='--')
plt.plot(moving_avg_pred, label="Moving Average", linestyle='-.')
plt.legend()
plt.title("Model Comparison - Depreciation Forecast")
plt.xlabel("Test Data Index")
plt.ylabel("Depreciation")
plt.grid(True)
plt.show()

# Save results to Excel
results_df.to_excel("model_comparison_results_no_arima.xlsx", index=False)
print("Comparison results saved to model_comparison_results_no_arima.xlsx")