import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error
import matplotlib.pyplot as plt

# Load and clean data
df = pd.read_csv("your_file.csv")
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.drop(columns=['Date'])

df = df.apply(pd.to_numeric, errors='coerce')
df = df.replace([np.inf, -np.inf], np.nan).dropna()

# Features and target
target_col = 'Depreciation'
X = df.drop(columns=[target_col])
y = df[target_col]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Random Forest
rf_model = RandomForestRegressor(n_estimators=200, random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)

# Accuracy metrics
mape = mean_absolute_percentage_error(y_test, rf_pred) * 100
rmse = np.sqrt(mean_squared_error(y_test, rf_pred))
print(f"Random Forest - MAPE: {mape:.2f}%, RMSE: {rmse:.2f}")

# Plot actual vs predicted
plt.figure(figsize=(10, 5))
plt.plot(y_test.values, label="Actual", marker='o')
plt.plot(rf_pred, label="Random Forest Predicted", marker='x')
plt.title("Depreciation Prediction - Random Forest")
plt.xlabel("Test Data Index")
plt.ylabel("Depreciation Value")
plt.legend()
plt.grid(True)
plt.show()

# Save predictions to Excel
results = pd.DataFrame({
    "Actual": y_test.values,
    "RandomForest_Predicted": rf_pred
})
results.to_excel("random_forest_predictions.xlsx", index=False)
print("Predictions saved to random_forest_predictions.xlsx")